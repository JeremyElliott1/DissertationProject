<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <link rel="stylesheet" href="/css/parallelPlot.css">
</head>

<body>

  <h1>Guardian Institution Ranking</h1>
  <div id="data" data-xaxis="<%= passedUniData %>"></div>

  <svg id="parallelChart" height="780" width="1800"></svg>
  <div id="my_dataviz"></div>

</body>
<script>


  const dataDiv = document.querySelector('#data');
  let uniData = dataDiv.dataset.xaxis;
  uniData = JSON.parse(uniData); // Need to convert from JSON obj to String to manipulate the array of uniData objects.

  const svg = d3.select('#parallelChart');

  const svgHeight = parseFloat(svg.attr('height'));
  const svgWidth = parseFloat(svg.attr('width'));


  // append the svg object to the body of the page
  // var svg2 = d3.select("#my_dataviz")
  //   .append("svg")
  //   .attr("width", innerWidth + margin.left + margin.right)
  //   .attr("height", innerHeight + margin.top + margin.bottom)
  //   .append("g")
  //   .attr("transform",
  //     "translate(" + margin.left + "," + margin.top + ")");

  //Create div for tooltip
  let div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

  //Click Handler
  function handleClick(d, i) {
    d3.select(this).classed("selected", !d3.select(this).classed("selected"));
    console.log(d.class);
  }

  const drawChart = (data) => {

    d3.selectAll("#my_dataviz > *").remove();

    const margin = {
      top: 20,
      right: 40,
      bottom: 20,
      left: 50
    }

    const innerHeight = svgHeight - margin.top - margin.bottom;
    const innerWidth = svgWidth - margin.left;


    const innerVis = svg.append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);


    // Extract the list of dimensions we want to keep in the plot, all except "name".
    let dimensions = d3.keys(data[0]).filter(function (d) {
      if (d !== "name") {
        return d
      }
    });

    // Build the X scale -> it find the best position for each Y axis
    //Equally spacing for an ordinal X axis. 
    //Remember range is screen space, domain is data space.
    const xScale = d3.scalePoint()
      .range([0, innerWidth])
      .padding(1)
      .domain(dimensions);

    // For each dimension, I build a linear scale. I store all in a y object
    //essentially an empty object, iterates throught dimensions which is an object that contains attributes, these attriubtes are key value pairings
    //where the key is just numbers 0-10, and the values are the string values for each column in the uni ranking table.
    //so below, we a creating an empty object y.
    //iterate through dimensions object, forEach attribute in dimensions, create a linear scale from min-max values of that column variable.
    let yScale = {}
    for (i in dimensions) {
      metricName = dimensions[i]
      yScale[metricName] = d3.scaleLinear()
        .domain(d3.extent(data, function (d) {
          if (d[metricName] == "") { return null }
          return d[metricName];
        }))
        .range([innerHeight, 0])
    };

    // Draw the axis:
    innerVis.selectAll("axis")
      // For each dimension of the dataset, add a group element:
      .data(dimensions)
      .enter()
      .append("g")
      // Translate this element to its right position on the x axis
      .attr("transform", function (d) { return "translate(" + xScale(d) + ")"; })
      // Build the axis with the call function
      .each(function (d) { d3.select(this).call(d3.axisLeft().scale(yScale[d])); })
      // Add axis title
      .append("text")
      .style("text-anchor", "middle")
      .attr("y", -10)
      .text(function (d) { return d; })
      .style("fill", "black")

    // The path function take a row of DB input, and return x and y coordinates of the line to draw for this raw.
    function path(d) {
      return d3.line()
        .defined(function (d) { return d[1] != null; })
        (dimensions.map(function (column) {
          if (d[column] === "") {
            return [xScale(column, null)]
          }
          return [xScale(column), yScale[column](d[column])];
        }));
    }

    function handleHover(d) {
      d3.select(this);
    }

    let linesG = innerVis
      .selectAll('myPath')
      .data(data);

    // Draw the lines
    linesG
      .enter()
      .append("path")
      .merge(linesG)
      .attr("d", path)
      // .style("fill", "none")
      .attr("class", "unSelected")
      // .style("opacity", 0.3)
      .on('click', handleClick)
      .on("mouseover", function (d) {
        div.transition()
          .duration(200)
          .style("opacity", .9);
        div.html(d.name)
          .style("left", (d3.event.pageX) + "px")
          .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function (d) {
        div.transition()
          .duration(500)
          .style("opacity", 0);
      });

    linesG
      .exit()
      .remove();


  }
  drawChart(uniData);

</script>

</html>