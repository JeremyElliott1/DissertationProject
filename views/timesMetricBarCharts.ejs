<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <link rel="stylesheet" href="/css/defaults.css">
  <link rel="stylesheet" href="/css/timesUniBarCharts.css">

</head>

<body>
  <button id="buttonHome"><a href="/">Home</a></button>

  <h1><span id="providerTitle">The Sunday Times</span> Ranking by Individual Scoring Metric</h1>

  <div id="menus">
    <label for="metricMenu">Select Scoring Metric:</label>

    <select id='metricDropDown' name="metricMenu">
    </select>
  </div>

  <svg id="chart" height="780" width="1300"></svg>

  <div id="data" data-xaxis="<%= passedUniData %>"></div>
</body>

<script>
  const dataDiv = document.querySelector('#data');
  let uniData = dataDiv.dataset.xaxis;
  uniData = JSON.parse(uniData); // NEED TO Unconvert from JSON obj to String for to manipulate the array.

  let selection = "rank2019";
  let selectionText;
  let dimensions = [];
  let options = [];

  //Extracts dimensions of received Uni Data
  //Creates an array of option obj containg a value & label properties
  // value property corresponds with MySQL headers
  // label property mutate SQL headers to be more ledgible (Adding spaces + Caps)
  const setMenuOptions = (d) => {
    dimensions = d3.keys(uniData[0]).filter(function (d) {
      if (d !== "name") {
        dimensions
        return d;
      }
    })
    dimensions.forEach(dimension => {
      let value = dimension;
      let label = dimension.replace(/([A-Z])/g, ' $1')
        .replace(/^./, function (str) { return str.toUpperCase(); })
      let option = { value, label };
      option[value, label];
      options.push(option);
    })
  }
  setMenuOptions();
  const dropDown = d3.select("#metricDropDown");

  dropDown.selectAll('option')
    .data(options)
    .enter()
    .append('option')
    .attr('value', function (d) { return d.value })
    .text(function (d) { return d.label });

  d3.select("#metricDropDown").on("change", change)

  function change() {
    selection = document.getElementById("metricDropDown").value;
    selectionPosition = document.getElementById("metricDropDown").selectedIndex;
    sortData(uniData, selection)
    render(uniData, selection);
  }

  //Sorts Data in order
  //Checks for reverse scoring with if statements
  const sortData = (data, variable) => {
    let array = data;
    if (variable.includes('rank') || variable.includes('Ratio')) {
      array.sort((a, b) => {
        if (a[variable] < b[variable]) {
          return -1;
        } else {
          return 1;
        }
      })
    }
    else {
      array.sort((a, b) => {
        //Two ways to access a objects variable, dot notation and bracket notation.
        //if attribute string is stored in a variable and not explicitly stated.  
        if (a[variable] < b[variable]) {
          return 1;
        } else {
          return -1;
        }
      })
    }
    return array;
  }

  let sortedData = sortData(uniData, selection);

  const svg = d3.select('#chart');

  const svgHeight = parseFloat(svg.attr('height'));
  const svgWidth = parseFloat(svg.attr('width'));

  //Create div for tooltip
  let div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

  function handleClick(d, i) {
    d3.select(this).classed("selected", !d3.select(this).classed("selected"));
  }

  const render = (data, selection) => {

    d3.selectAll("#chart > *").remove();
    //Value Accessors to avoid duplication of code, and helps when wanting to change the arguments passed below:

    const xValue = (d) => d.name;
    const yValue = (d) => d[selection];

    const margin = {
      top: 60,
      right: 40,
      bottom: 60,
      left: 180
    }
    const innerHeight = svgHeight - margin.top - margin.bottom;
    const innerWidth = svgWidth - margin.left - margin.right;

    //Scales
    const xScale = d3.scaleBand()
      .domain(data.map(xValue))
      .range([0, innerWidth])
      .padding(0.15);
    const yScale = d3.scaleLinear()
      .domain([0, d3.max(data, yValue)])
      .range([innerHeight, 0])
      .nice();

    //Axis
    const yAxis = d3.axisLeft(yScale)
      .tickSizeOuter(0)
      .tickSize(-innerWidth)
      .tickFormat(d3.format('.0s'));
    const xAxis = d3.axisBottom(xScale)
      .tickSizeOuter(0)
      .tickFormat("");

    //Margins & Appending/Positioning of Axis
    const innerVis = svg.append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);
    const yAxisG = innerVis.append('g')
      .call(yAxis);
    yAxisG.append('text')
      .text(options[selectionPosition].label)
      .attr('fill', 'black')
      .attr('x', -45)
      .attr('y', innerHeight / 2);

    const xAxisG = innerVis.append('g')
      .call(xAxis)
      .attr('transform', `translate(0, ${innerHeight})`);
    xAxisG.append('text')
      .text('Universities')
      .attr('fill', 'black')
      .attr('x', innerWidth / 2)
      .attr('y', 40);

    let barsG = innerVis.selectAll('rect')
      .data(data);

    barsG.enter()
      .append('rect')
      .merge(barsG)
      .attr('class', 'unSelected')
      .on('click', handleClick)
      .attr('x', (d) => xScale(xValue(d)))
      .attr('width', xScale.bandwidth())
      .attr('height', (d) => innerHeight - (yScale(yValue(d))))
      .attr('y', (d) => yScale(yValue(d)))
      .on("mouseover", function (d) {
        div.transition()
          .duration(200)
          .style("opacity", .9);
        div.html(d.name)
          .style("left", (d3.event.pageX) + "px")
          .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function (d) {
        div.transition()
          .duration(500)
          .style("opacity", 0);
      });

    barsG.exit().
      remove();
  };
  change();
  render(sortedData, selection);
</script>

</html>