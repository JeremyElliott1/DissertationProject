<!DOCTYPE html>
<meta charset="utf-8">
<style>
  svg {
    font: 10px sans-serif;
  }

  .background path {
    fill: none;
    stroke: #ddd;
    shape-rendering: crispEdges;
  }

  .foreground path {
    fill: none;
    stroke: steelblue;
  }

  .brush .extent {
    fill-opacity: .3;
    stroke: #f6ff;
    shape-rendering: crispEdges;
  }

  .axis line,
  .axis path {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .axis text {
    text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
    cursor: move;
  }
</style>

<body>

  <h1>Guardian Overall Ranking</h1>
  <div id="data" data-xaxis="<%= passedUniData %>"></div>

  <svg id="parallelChart" height="780" width="1800"></svg>
  <div id="buttonPannel">
    <button><a href="/careerprospects">Carrer Prospects</a></button>
    <button><a href="/teachingScore">Average Teaching Scores</a></button>
  </div>

</body>
<script src="https://d3js.org/d3.v5.min.js"></script>
<script>

  const dataDiv = document.querySelector('#data');
  let uniData = dataDiv.dataset.xaxis;
  uniData = JSON.parse(uniData); // Need to convert from JSON obj to String to manipulate the array of uniData objects.

  const svg = d3.select('#parallelChart');

  const svgHeight = parseFloat(svg.attr('height'));
  const svgWidth = parseFloat(svg.attr('width'));

  const margin = {
    top: 50,
    right: 0,
    bottom: 10,
    left: 0
  }
  const height = svgHeight - margin.top - margin.bottom;
  const width = svgWidth - margin.left - margin.right;

  let x = d3.scalePoint()
    .range([0, width])
    .padding(.1);
  let y = {};
  let dragging = {};

  let line = d3.line();
  let axis = d3.axisLeft();
  let background;
  let foreground;

  const innerVis = svg.append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

  // Extract the list of dimensions and create a scale for each.
  x.domain(dimensions = d3.keys(uniData[0]).filter(function (d) {
    return d != "name" && (y[d] = d3.scaleLinear()
      .domain(d3.extent(uniData, function (p) { return +p[d]; }))
      .range([height, 0]));
  }));

  // Add grey background lines for context.
  background = innerVis.append("g")
    .attr("class", "background")
    .selectAll("path")
    .data(uniData)
    .enter().append("path")
    .attr("d", path);

  // Add blue foreground lines for focus.
  foreground = innerVis.append("g")
    .attr("class", "foreground")
    .selectAll("path")
    .data(uniData)
    .enter().append("path")
    .attr("d", path);

  // Add a group element for each dimension.
  var g = innerVis.selectAll(".dimension")
    .data(dimensions)
    .enter().append("g")
    .attr("class", "dimension")
    .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
    .call(d3.drag()
      .subject(function (d) { return { x: x(d) }; })
      .on("start", function (d) {
        dragging[d] = x(d);
        background.attr("visibility", "hidden");
      })
      .on("drag", function (d) {
        dragging[d] = Math.min(width, Math.max(0, d3.event.x));
        foreground.attr("d", path);
        dimensions.sort(function (a, b) { return position(a) - position(b); });
        x.domain(dimensions);
        g.attr("transform", function (d) { return "translate(" + position(d) + ")"; })
      })
      .on("end", function (d) {
        delete dragging[d];
        transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
        transition(foreground).attr("d", path);
        background
          .attr("d", path)
          .transition()
          .delay(500)
          .duration(0)
          .attr("visibility", null);
      }));

  // Add an axis and title.
  g.append("g")
    .attr("class", "axis")
    .each(function (d) { d3.select(this).call(axis.scale(y[d])); })
    .append("text")
    .style("text-anchor", "middle")
    .attr("y", -20)
    .text(function (d) { 
      console.log(d);
      return d; });

  // Add and store a brush for each axis.
  g.append("g")
    .attr("class", "brush")
    .each(function (d) {
      d3.select(this).call(y[d].brush = d3.brushY().extent([[-8, 0], [8, height]]).on("start", brushstart).on("brush", brush));
    })
    .selectAll("rect")
    .attr("x", -8)
    .attr("width", 16);

  function position(d) {
    var v = dragging[d];
    return v == null ? x(d) : v;
  }

  function transition(g) {
    return g.transition().duration(500);
  }

  // Returns the path for a given data point.
  function path(d) {
    return line(dimensions.map(function (p) { return [position(p), y[p](d[p])]; }));
  }

  function brushstart() {
    d3.event.sourceEvent.stopPropagation();
  }

  // Handles a brush event, toggling the display of foreground lines.
  function brush() {
    var actives = dimensions.filter(function (p) { return !y[p].brushY.empty(); }),
      extents = actives.map(function (p) { return y[p].brush.extent(); });
    foreground.style("display", function (d) {
      return actives.every(function (p, i) {
        return extents[i][0] <= d[p] && d[p] <= extents[i][1];
      }) ? null : "none";
    });
  }

</script>