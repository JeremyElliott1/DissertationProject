<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewpofacert" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="//d3js.org/d3.v3.min.js"></script>
  <link rel="stylesheet" href="/css/defaults.css">
  <link rel="stylesheet" href="/css/timesParallelPlot.css">
</head>

<body>
  <button id="buttonHome"><a href="/">Home</a></button>

  <h1><span id="providerTitle">The Sunday Times </span>Overall Ranking</h1>

  <svg id="parallelChart" height="780" width="1800"></svg>

  <div id="buttonPannel">
    <button><a href="/timesBar">View Metrics in Detail</a></button>
  </div>

  <div id="data" data-xaxis="<%= passedUniData %>"></div>
</body>

<script>
  //Obtain data from #data div
  const dataDiv = document.querySelector('#data');
  let uniData = dataDiv.dataset.xaxis;
  uniData = JSON.parse(uniData);

  //set SVG selection & get SVG height & width
  const svg = d3.select('#parallelChart');
  const svgHeight = parseFloat(svg.attr('height'));
  const svgWidth = parseFloat(svg.attr('width'));

  // set InnerVis height & width
  const margin = {
    top: 25,
    right: 0,
    bottom: 10,
    left: 0
  }
  const height = svgHeight - margin.top - margin.bottom;
  const width = svgWidth - margin.left - margin.right;

  //Move innerVis by top & left margin
  const innerVis = svg.append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`);

  //Create div for tooltip
  let div = d3.select("body")
    .append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

  //ClickHandler to toggle highlighted class
  function handleClick(d, i) {
    d3.select(this).classed("highlighted", !d3.select(this).classed("highlighted"));
  }

  //Helper objects used to make code more ledgible & easier to maintain
  let x = d3.scale.ordinal().rangePoints([0, width], 1);
  let y = {};
  let dragging = {};

  let line = d3.svg.line();
  let axis = d3.svg.axis().orient("left");
  let background;
  let foreground;

  // Extract the list of dimensions and create a scale for each.
  x.domain(dimensions = d3.keys(uniData[0]).filter(function (dimension) {
    let yRange = [height, 0];
    if (dimension === "name") {
      return false
    }
    if (dimension.includes("rank") || dimension.includes("Ratio")) {
      yRange = [0, height];
    }
    return (y[dimension] = d3.scale.linear()
      .domain(d3.extent(uniData, function (value) {
        if (value[dimension] == "") {
          return null;
        }
        return +value[dimension];
      }))
      .range(yRange));
  }));

  // Draw background Lines
  background = innerVis.append("g")
    .attr("class", "background")
    .selectAll("path")
    .data(uniData)
    .enter()
    .append("path")
    .attr("d", path)
    .on('click', handleClick)
    .on("mouseover", function (d) {
      div.transition()
        .duration(200)
        .style("opacity", .9);
      div.html(d.name)
        .style("left", (d3.event.pageX) + "px")
        .style("top", (d3.event.pageY - 28) + "px");
    })
    .on("mouseout", function (d) {
      div.transition()
        .duration(500)
        .style("opacity", 0);
    });

  // Draw foreground Lines
  foreground = innerVis.append("g")
    .attr("class", "foreground")
    .selectAll("path")
    .data(uniData)
    .enter()
    .append("path")
    .attr("d", path)
    .on('click', handleClick)
    .on("mouseover", function (d) {
      div.transition()
        .duration(200)
        .style("opacity", .9);
      div.html(d.name)
        .style("left", (d3.event.pageX) + "px")
        .style("top", (d3.event.pageY - 28) + "px");
    })
    .on("mouseout", function (d) {
      div.transition()
        .duration(500)
        .style("opacity", 0);
    });

  // For each dimension create a group element which contains drag & drop functionality
  let g = innerVis.selectAll(".dimension")
    .data(dimensions)
    .enter().append("g")
    .attr("class", "dimension")
    .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
    .call(d3.behavior.drag()
      .origin(function (d) { return { x: x(d) }; })
      .on("dragstart", function (d) {
        dragging[d] = x(d);
        background.attr("visibility", "hidden");
      })
      .on("drag", function (d) {
        dragging[d] = Math.min(width, Math.max(0, d3.event.x));
        foreground.attr("d", path);
        dimensions.sort(function (a, b) { return position(a) - position(b); });
        x.domain(dimensions);
        g.attr("transform", function (d) { return "translate(" + position(d) + ")"; })
      })
      .on("dragend", function (d) {
        delete dragging[d];
        transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
        transition(foreground).attr("d", path);
        background
          .attr("d", path)
          .transition()
          .delay(500)
          .duration(0)
          .attr("visibility", null);
      }));

  //Adds a group to draw scale and title
  g.append("g")
    .attr("class", "axis")
    .each(function (d) { d3.select(this).call(axis.scale(y[d])); })
    .append("text")
    .style("text-anchor", "middle")
    .attr("y", -9)
    .text(function (d) { return d; });

  //Adds a group to add and store a brush for each scale.
  g.append("g")
    .attr("class", "brush")
    .each(function (d) {
      d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brushstart", brushstart).on("brush", brush));
    })
    .selectAll("rect")
    .attr("x", -8)
    .attr("width", 16);

  function position(d) {
    let v = dragging[d];
    return v == null ? x(d) : v;
  }
  //Returns animated 0.5sec transition for a given selection
  function transition(g) {
    return g.transition().duration(500);
  }

  //Returns path coordinates along each scale for each data item
  function path(d) {
    return line.defined(function (d) { return d[1] != null; })(dimensions.map(function (p) {

      if (d[p] === "") {
        return [position(p, null)];
      }
      return [position(p), y[p](d[p])];
    }))
  }

  //Ensures that a mousedown event is not followed by a click event so the Onclick listner is not invoked
  function brushstart() {
    d3.event.sourceEvent.stopPropagation();
  }

  // Handles a brush event, toggling the display of foreground lines.
  function brush() {
    let actives = dimensions.filter(function (p) { return !y[p].brush.empty(); }),
      extents = actives.map(function (p) { return y[p].brush.extent(); });
    foreground.style("display", function (d) {
      return actives.every(function (p, i) {
        return extents[i][0] <= d[p] && d[p] <= extents[i][1];
      }) ? null : "none";
    });
  }
</script>

</html>