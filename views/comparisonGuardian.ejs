<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="//d3js.org/d3.v3.min.js"></script>
  <link rel="stylesheet" href="/css/comparison.css">
</head>

<body>
  <h1>Comparison Rankings</h1>

  <div id="menuContainer">
    <label for="universityMenu">Select A University:</label>
    <select id='universityDropDown' name="universityMenu"></select>
  </div>

  <svg id="parallelChart" height="1080" width="1800"></svg>

  <div id="buttonPannel">
    <button><a href="/guardianBar">View Metrics in Detail</a></button>
  </div>

  <div id="data" data-xaxis="<%= passedUniData %>"></div>



</body>

<script>
  //Obtain data from #data div
  const dataDiv = document.querySelector('#data');
  let uniData = dataDiv.dataset.xaxis;
  uniData = JSON.parse(uniData);

  // const ComplteUniDataDiv = document.querySelector('#completeUni');
  // let completeUniData = ComplteUniDataDiv.dataset.xaxis;
  // completeUniData = JSON.parse(completeUniData);

  // console.log(completeUniData);

  //set SVG selection & get SVG height & width
  const svg = d3.select('#parallelChart');
  const svgHeight = parseFloat(svg.attr('height'));
  const svgWidth = parseFloat(svg.attr('width'));





  let selection = "Aberdeen";
  let selectedPosition = 0;
  let uniNames = [];
  let options = [];

  //Extracts dimensions of received Uni Data
  //Creates an array of option obj containg a value & label properties
  // value property corresponds with MySQL headers
  // label property mutate SQL headers to be more ledgible (Adding spaces + Caps)
  const setMenuOptions = (d) => {
    uniData.forEach(uniRow => {
      uniNames.push(uniRow.name);
    })
  };
  setMenuOptions();

  const dropDown = d3.select("#universityDropDown");
  dropDown.selectAll('option')
    .data(uniNames)
    .enter()
    .append('option')
    .attr('value', function (d) { return d })
    .text(function (d) { return d });

  dropDown.on("change", change);

  function change() {
    selection = document.getElementById("universityDropDown").value;
    selectedPosition = document.getElementById("universityDropDown").selectedIndex;
    deletePreviousChart();
    render(uniData);
  }


  // set InnerVis height & width
  const margin = {
    top: 160,
    right: 0,
    bottom: 100,
    left: 100
  }
  const height = svgHeight - margin.top - margin.bottom;
  const width = svgWidth - margin.left - margin.right;

  //Move innerVis by top & left margin
  const innerVis = svg.append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`);

  //Create div for tooltip
  let div = d3.select("body")
    .append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

  //Click Handler
  function handleClick(d, i) {
    d3.select(this).classed("highlighted", !d3.select(this).classed("highlighted"));
  }
  function deletePreviousChart() {
    svg.selectAll(".completeUni").remove();
    svg.selectAll(".guardian").remove();
    svg.selectAll(".dimension").remove();
  }

  render = (data) => {

    selectedRow = [data[selectedPosition]];
    // completeUniRow = [completeUniData[selectedPosition]];



    //Helper objects used to make code more ledgible & easier to maintain
    let x = d3.scale.ordinal().rangePoints([0, width], 1);
    let y = {};
    let dragging = {};

    let line = d3.svg.line();
    let axis = d3.svg.axis().orient("left");
    let background = null;
    let foreground = null;

    // Extract the list of dimensions and create a scale for each.
    x.domain(dimensions = d3.keys(data[0]).filter(function (dimension) {
      if (dimension === "name") {
        return false
      }
      return (y[dimension] = d3.scale.linear()
        .domain(d3.extent(data, function (value) {
          if (value[dimension] == "") {
            return null;
          }
          return +value[dimension];
        }))
        .range([0, height]));
    }));

    console.log(dimensions);

    // // Draw CompleteUni Lines
    // completeUniLines = innerVis.append("g")
    //   .attr("class", "completeUni")
    //   .selectAll("path")
    //   .data(completeUniRow)
    //   .enter()
    //   .append("path")
    //   .attr("d", path)
    //   .on('click', handleClick)
    //   .on("mouseover", function (d) {
    //     div.transition()
    //       .duration(200)
    //       .style("opacity", .9);
    //     div.html(d.name)
    //       .style("left", (d3.event.pageX) + "px")
    //       .style("top", (d3.event.pageY - 28) + "px");
    //   })
    //   .on("mouseout", function (d) {
    //     div.transition()
    //       .duration(500)
    //       .style("opacity", 0);
    //   });

    // Draw foreground Lines
    guardianLines = innerVis.append("g")
      .attr("class", "guardian")
      .selectAll("path")
      .data(selectedRow)
      .enter()
      .append("path")
      .attr("d", path)
      .on('click', handleClick)
      .on("mouseover", function (d) {
        div.transition()
          .duration(200)
          .style("opacity", .9);
        div.html(d.name)
          .style("left", (d3.event.pageX) + "px")
          .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function (d) {
        div.transition()
          .duration(500)
          .style("opacity", 0);
      });

    // For each dimension create a group element which contains drag & drop functionality
    let g = innerVis.selectAll(".dimension")
      .data(dimensions)
      .enter().append("g")
      .attr("class", "dimension")
      .attr("transform", function (d) { return "translate(" + x(d) + ")"; })
      .call(d3.behavior.drag()
        .origin(function (d) { return { x: x(d) }; })
        .on("dragstart", function (d) {
          console.log(d);
          dragging[d] = x(d);
          console.log(dragging);
        })
        .on("drag", function (d) {
          dragging[d] = Math.min(width, Math.max(0, d3.event.x));
          guardianLines.attr("d", path);
          dimensions.sort(function (a, b) { return position(a) - position(b); });
          x.domain(dimensions);
          g.attr("transform", function (d) { return "translate(" + position(d) + ")"; })
        })
        .on("dragend", function (d) {
          delete dragging[d];
          transition(d3.select(this)).attr("transform", "translate(" + x(d) + ")");
          transition(guardianLines).attr("d", path);
        }));



    //Adds a group to add and store a brush for each scale.
    g.append("g")
      .attr("class", "brush")
      .each(function (d) {
        d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brushstart", brushstart).on("brush", brush));
      })
      .selectAll("rect")
      .attr("x", -8)
      .attr("width", 16);

    function position(d) {
      let v = dragging[d];
      return v == null ? x(d) : v;
    }
    //Returns animated 0.5sec transition for a given selection
    function transition(g) {
      return g.transition().duration(500);
    }

    //Returns path coordinates along each scale for each data item
    function path(d) {
      return line.defined(function (d) { return d[1] != null; })(dimensions.map(function (p) {

        if (d[p] === "") {
          return [position(p, null)];
        }
        return [position(p), y[p](d[p])];
      }))
    }

    //Adds a group to draw scale and title
    g.append("g")
      .attr("class", "axis")
      .each(function (d) { d3.select(this).call(axis.ticks(6).scale(y[d])); })
      .append("text")
      .style("text-anchor", "middle")
      .attr("transform", d3.transform('translate(0 -60) rotate(-40)'))
      // .attr("transform", "translate(50, -80)")
      .text(function (d) { return d; });

    //Ensures that a mousedown event is not followed by a click event so the Onclick listner is not invoked
    function brushstart() {
      d3.event.sourceEvent.stopPropagation();
    }

    // Handles a brush event, toggling the display of foreground lines.
    function brush() {
      let actives = dimensions.filter(function (p) { return !y[p].brush.empty(); }),
        extents = actives.map(function (p) { return y[p].brush.extent(); });
      guardianLines.style("display", function (d) {
        return actives.every(function (p, i) {
          return extents[i][0] <= d[p] && d[p] <= extents[i][1];
        }) ? null : "none";
      });
    }
  }
  render(uniData);
</script>

</html>