<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="https://d3js.org/d3.v5.min.js"></script>

</head>

<body>

  <h1>Guardian Institution Ranking</h1>
  <div id="data" data-xaxis="<%= passedUniData %>">
  </div>

  <svg id="chart" height="780" width="1820"></svg>

  <div>
  </div>

</body>
<script>

  const dataDiv = document.querySelector('#data');
  let uniData = dataDiv.dataset.xaxis;
  uniData = JSON.parse(uniData); // NEED TO Unconvert from JSON obj to String for to manipulate the array.

  const sortData = (data, variable) => {
    let newList = data;
    newList.sort((a, b) => {
      //Two ways to access a objects variable, dot notation and bracket notation.
      //if attribute string is stored in a variable and not explicitly stated.  
      if (a[variable] < b[variable]) {
        return 1;
      } else {
        return -1;
      }
    })
    return newList;
  }

  sortedData = sortData(uniData, 'careerProspects');

  const svg = d3.select('#chart');

  const svgHeight = parseFloat(svg.attr('height'));
  const svgWidth = parseFloat(svg.attr('width'));



  const render = (data) => {
    //Value Accessors to avoid duplication of code, and helps when wanting to change the arguments passed below:
    const xValueName = 'University';
    const yValueName = 'Career Prospects';

    const xValue = (d) => d.name;
    const yValue = (d) => d.careerProspects;

    const margin = {
      top: 60,
      right: 40,
      bottom: 60,
      left: 150
    }
    const innerHeight = svgHeight - margin.top - margin.bottom;
    const innerWidth = svgWidth - margin.left - margin.right;

    //Scales
    const xScale = d3.scaleBand()
      .domain(data.map(xValue))
      .range([0, innerWidth])
      .padding(0.3);
    const yScale = d3.scaleLinear()
      .domain([0, d3.max(data, yValue)])
      .range([innerHeight, 0])
      .nice();

    //Axis
    const yAxis = d3.axisLeft(yScale)
      .tickSizeOuter(0)
      .tickSize(-innerWidth)
      .tickFormat(d3.format('.0s'));
    const xAxis = d3.axisBottom(xScale)
      .tickSizeOuter(0)
      .tickFormat("");

    //Margins & Appending/Positioning of Axis
    const chartBarsG = svg.append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);
    const yAxisG = chartBarsG.append('g')
      .call(yAxis);
    yAxisG.append('text')
      .text(yValueName)
      .attr('fill', 'black')
      .attr('x', -45)
      .attr('y', innerHeight / 2);

    const xAxisG = chartBarsG.append('g')
      .call(xAxis)
      .attr('transform', `translate(0, ${innerHeight})`);
    xAxisG.append('text')
      .text('Universities')
      .attr('fill', 'black')
      .attr('x', innerWidth / 2)
      .attr('y', 40);

    let bars = chartBarsG.selectAll('rect')
      .data(data)


    bars.exit().
      remove();

    bars.enter()
      .append('rect')
      .merge(bars)
      .attr('x', (d) => xScale(xValue(d)))
      .attr('width', xScale.bandwidth())
      .attr('height', (d) => innerHeight - (yScale(yValue(d))))
      .attr('y', (d) => yScale(yValue(d)));

    chartBarsG.append('text')
      .attr('x', innerWidth / 2)
      .attr('y', -margin.top / 2)
      .text(yValueName);
  };
  render(sortedData);

</script>

</html>